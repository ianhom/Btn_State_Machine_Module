{
  "name": "Btn state machine module",
  "tagline": "按键状态机模块",
  "body": "# **Btn_State_Machine_Module**\r\n## **简介**:\r\n一直在做代码模块化的工作，分享一个自己写的按键扫描模块，欢迎大家试用。   \r\n本模块计划长期更新，本人能力有限，有错误之处欢迎指正交流，我将根据大家的反馈进行修改优化，提供更可靠的软件模块给大家。   \r\n\r\n---\r\n**更新说明**   \r\n**2016年6月15日**： 本模块目前更新至V1.10，相比于采用switch状态机的V1.00版本，V1.10的状态机采用了状态转移表来实现，在增加状态数量和功能的前提下，不仅提高了执行效率，同时减少了10%的FLASH消耗。\r\n\r\n## **说明**：\r\n###本模块可灵活配置如下参数：\r\n* 按键数量；\r\n* 按键常开常闭类型（未按下时稳态值）；\r\n* 按键检测使能/非能控制；\r\n* 按键去抖时间；\r\n* 按键长按识别时间；\r\n* 每个按键独立的按键状态获取函数。\r\n   \r\n###本模块可以为上层提供：\r\n* 按键事件（瞬态）：\r\n  * BTN_PRESSED_EVT        按键刚被短按；\r\n  * BTN_LONG_PRESSED_EVT   按键刚被长按；\r\n  * BTN_S_RELEASED_EVT     按键刚从短按状态下释放；\r\n  * BTN_L_RELEASED_EVT     按键刚从长按状态下释放。\r\n  \r\n* 按键状态（稳态）：\r\n  * BTN_IDLE_ST            按键处于空闲状态（未按下）；\r\n  * BTN_PRESS_AFT_ST       按键处于短按状态；\r\n  * BTN_HOLDING_ST         按键处于长按状态。\r\n\r\n## **资源消耗参考**：\r\n### M0+内核 + IAR 下 Low优化等级：  \r\n\r\n 内容 | 区域 | 大小 | 说明                                                  \r\n ------------ | ------------ | ------------ | -------------\r\n 代码 | Flash | 468字节 | 程序416字节 + 52字节的状态转移表                                                    \r\n 配置参数/状态/接口变量 | RAM静态储存区 | n*20 + 8字节 | n为按键数量  \r\n 临时变量/函数调用开销 | RAM栈区域 | 40字节 | 无   \r\n         \r\n## **使用方法**：\r\n1. 将Btn_SM_Module.c文件导入IDE工程，增加Btn_SM_Module.h和Btn_SM_Config.h的包含路径。\r\n2. 修改Btn_SM_Config.h中MAX_BTN_CH的值为按键数量, 如需要为每个按键定义独立的“按键状态获取函数”，可在Btn_SM_Config.h定义 __BTN_SM_SPECIFIED_BTN_ST_FN\r\n3. 编写系统时间获取函数，要求反馈系统ms时钟，类型为 uint16 (*)();\r\n4. 编写按键状态获取函数，要求根据输入参数通道号反馈对应按键状态（逻辑1/0），类型为 uint8 (*)(uint8 u8Ch)。\r\n5. 参考Btn_SM_Demo.c的代码，若需快速配置，可调用Btn_SM_Easy_Init()函数初始化模块；或参考Btn_SM_Easy_Init()函数，创建配置参数结构体实体并根据需求进行初始化配置（按键编号、去抖时间，长按时间，按键常态、是否使能按键、按键状态获取函数）和进行初始化工作。\r\n8. 轮询Btn_Channel_Process()进行各个按键通道的状态，通过该函数输出参数确定按键返回事件及状态。\r\n9. 通过Btn_Func_En_Dis()可在初始化之后屏蔽或启用按键功能。\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}